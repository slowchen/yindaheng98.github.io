(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{566:function(s,t,a){"use strict";a.r(t);var e=a(4),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"涉及到类或者结构体数组的想都不要想直接上指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#涉及到类或者结构体数组的想都不要想直接上指针"}},[s._v("#")]),s._v(" 涉及到类或者结构体数组的想都不要想直接上指针")]),s._v(" "),a("p",[s._v("STL库中那些模板结构也是一样")]),s._v(" "),a("p",[s._v("只有没有定义初始值的结构体才能用"),a("code",[s._v("结构名({参数,...})")]),s._v("进行初始化")]),s._v(" "),a("h2",{attrs:{id:"两种排序函数sort"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两种排序函数sort"}},[s._v("#")]),s._v(" 两种排序函数sort")]),s._v(" "),a("h2",{attrs:{id:"匿名函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匿名函数"}},[s._v("#")]),s._v(" 匿名函数")]),s._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[](int x, int y) { return x + y; }\n// 隐式返回类型\n[](int& x) { ++x; }\n// 没有return语句 -> lambda 函数的返回类型是'void'\n[]() { ++global_x; }\n// 没有参数,仅访问某个全局变量\n[]{ ++global_x; }\n// 与上一个相同,省略了()\n[](int x, int y) -> int { int z = x + y; return z; }\n//显示指定返回类型\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h2",{attrs:{id:"printf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#printf"}},[s._v("#")]),s._v(" printf")]),s._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('printf("%06d",整数);//以0左侧填充至6位输出整数\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"memset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memset"}},[s._v("#")]),s._v(" memset")]),s._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#include<memory.h>\n\nmemset(&dists[i][0], 0, N * sizeof(int));//全部置0\nmemset(&dists[i][0], 0xFF, N * sizeof(int));//全部置1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"函数指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数指针"}},[s._v("#")]),s._v(" 函数指针")]),s._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("int (*pfunc)(int,bool);//函数返回值类型 (*变量名)(参数类型列表,...);\ntypedef int (*PFunc)(int,int);  \nPFunc pfunc;//typedef定义的是指向某种类型函数的函数指针类型，而不是具体指针，用它可定义具体指针\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"string大小写转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string大小写转换"}},[s._v("#")]),s._v(" string大小写转换")]),s._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#include <algorithm>\ntransform(str.begin(),str.end(),str.begin(),::tolower);//转大写\ntransform(str.begin(),str.end(),str.begin(),::toupper);//转小写\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"string长度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string长度"}},[s._v("#")]),s._v(" string长度")]),s._v(" "),a("p",[a("code",[s._v("size()")]),s._v(" 和 "),a("code",[s._v("length()")]),s._v("：这两个函数会返回 string 类型对象中的字符个数，且它们的执行效果相同。")]),s._v(" "),a("h2",{attrs:{id:"vector排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vector排序"}},[s._v("#")]),s._v(" vector排序")]),s._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#include<algorithm>\nusing std::sort;\nsort(vector.begin(),vector.end(),[](const int &a, const int &b)->bool{ return a>b; });\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("注意其中的比较函数必须是严格弱序(strict weak ordering)的，即对同一个比较不能输出两种值。不符合严格弱序的比较函数会在运行时报错。")]),s._v(" "),a("p",[s._v("在进行多重排序时容易写出非严格弱序函数，即“"),a("code",[s._v("a.c1")]),s._v("和"),a("code",[s._v("b.c1")]),s._v("相等时比较"),a("code",[s._v("a.c2")]),s._v("和"),a("code",[s._v("b.c2")]),s._v("”这种情况，这时的比较函数容易决不能成"),a("code",[s._v("a.c1>b.c1||a.c2>b.c2")]),s._v("，而应该将"),a("code",[s._v("a.c1")]),s._v("和"),a("code",[s._v("b.c1")]),s._v("相等时的代码单独放在一个"),a("code",[s._v("if")]),s._v("里面。")]),s._v(" "),a("p",[s._v("（原因自己想）")]),s._v(" "),a("h2",{attrs:{id:"运算符重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符重载"}},[s._v("#")]),s._v(" 运算符重载")]),s._v(" "),a("p",[s._v("在"),a("code",[s._v("class")]),s._v("里面：")]),s._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Box\n{\n   public:\n      // 重载 + 运算符，用于把两个 Box 对象相加\n      Box operator+(const Box& b)\n      {\n         Box box;\n         box.length = this->length + b.length;\n         box.breadth = this->breadth + b.breadth;\n         box.height = this->height + b.height;\n         return box;\n      }\n   private:\n      double length;      // 长度\n      double breadth;     // 宽度\n      double height;      // 高度\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("不可重载的运算符都“不是运算符”：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v(".")]),s._v("：成员访问运算符")]),s._v(" "),a("li",[a("code",[s._v(".*")]),s._v(", "),a("code",[s._v("->*")]),s._v("：成员指针访问运算符")]),s._v(" "),a("li",[a("code",[s._v("::")]),s._v("：域运算符")]),s._v(" "),a("li",[a("code",[s._v("sizeof")]),s._v("：长度运算符")]),s._v(" "),a("li",[a("code",[s._v("?:")]),s._v("：条件运算符")]),s._v(" "),a("li",[a("code",[s._v("#")]),s._v("： 预处理符号")])])])}),[],!1,null,null,null);t.default=n.exports}}]);